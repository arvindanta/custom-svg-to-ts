"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const gfs = __importStar(require("graceful-fs"));
const path = __importStar(require("path"));
const parser_typescript_1 = __importDefault(require("prettier/parser-typescript"));
const prettier = __importStar(require("prettier/standalone"));
const util = __importStar(require("util"));
gfs.gracefulify(fs);
const readfileFromFS = util.promisify(fs.readFile);
const writeFileToFS = util.promisify(fs.writeFile);
const fileComment = '/* ðŸ¤– this file was generated by svg-to-ts*/\n';
exports.extractSvgContent = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    const fileContentRaw = yield readfileFromFS(filePath, 'utf-8');
    return fileContentRaw.replace(/\r?\n|\r/g, ' ');
});
exports.writeFile = (outputDirectory, fileName, fileContent) => __awaiter(void 0, void 0, void 0, function* () {
    const formattedFileContent = formatContent(`${fileComment}${fileContent}`);
    if (!fs.existsSync(outputDirectory)) {
        fs.mkdirSync(outputDirectory, { recursive: true });
    }
    yield writeFileToFS(path.join(outputDirectory, `${fileName}.ts`), formattedFileContent);
});
exports.readFile = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    return readfileFromFS(filePath, 'utf-8');
});
exports.deleteFolder = (directoryPath) => __awaiter(void 0, void 0, void 0, function* () {
    if (fs.existsSync(directoryPath)) {
        fs.readdirSync(directoryPath).forEach((filePath) => {
            const curPath = directoryPath + '/' + filePath;
            if (fs.lstatSync(curPath).isDirectory()) {
                exports.deleteFolder(curPath);
            }
            else {
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(directoryPath);
    }
});
exports.deleteFiles = (filePaths) => {
    filePaths.forEach((filePath) => fs.unlinkSync(filePath));
};
const formatContent = (fileContent) => prettier.format(fileContent, {
    parser: 'typescript',
    plugins: [parser_typescript_1.default],
    singleQuote: true
});
//# sourceMappingURL=file-helpers.js.map